LibTorrent

CONTACT

   Send bug reports, suggestions and patches to <jaris@ifi.uio.no> or
  to the mailinglist.

SIGC++

   The API will use sigc++ signals to give the client a simple, yet
  powerfull way of reacting to events from the library. The client can
  hook multiple slots on each signal and modify the parameters to suit
  the functions. This avoids lots of unnessesary code in the client.

DOWNLOADING 220mb

  ./rtorrent
  7.22 user 4.84 system 1:26.69 elapsed 13 %CPU

  ./btdownloadcurses.py
  44.74 user 20.00 system 2:04.35 elapsed 52 %CPU

UPLOADING 220mb

  ./rtorrent
  5.98 user 4.59 system 1:38.47 elapsed 10 %CPU

  btdownloadcurses.py
  21.28 user 11.28 system 1:30.34 elapsed 36 %CPU

TESTS (PRELIMINARY)

   The higher number of page faults in rtorrent happens since mmap'ed
  blocks of the file might not be in memory when it tries to
  read/write. Even though the official BitTorrent client uses python,
  that shouldn't have this much impact on CPU usage.

LOCAL TRANSFER RATES COMPARED WITH POPULAR CLIENTS

   While testing uploading from a libTorrent client to some popular
  clients i got some fairly interesting numbers on an 800Mhz
  PIII. Uploading to another libTorrent client got transfer rates of 4
  MB/s. To the official BitTorrent client the rates were around 2 MB/s,
  while Azureus only managed a pathetic 500 KB/s. Does it spend the
  equivalent of 1.5 MB/s on those nice and shiny GUI thingies?

MADVISE WILLNEED KERNEL BUG

   The 2.4.20 kernels i've tried the madvise(..., MADV_WILLNEED)
  system call on have locked up. It will be disabled on those kernels
  when i manage to write a configure script. (Or i'm going to make
  enableing it explicit)